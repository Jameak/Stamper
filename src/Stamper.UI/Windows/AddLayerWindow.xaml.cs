using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Stamper.DataAccess;
using Stamper.UI.ViewModels;
using Stamper.UI.ViewModels.Base;
using Stamper.UI.ViewModels.Enums;

namespace Stamper.UI.Windows
{
    public partial class AddLayerWindow : Window
    {
        private AddLayerViewModel _vm;
        public bool OkClicked = false;

        public AddLayerWindow()
        {
            InitializeComponent();
            _vm = new AddLayerViewModel();

            _vm.SelectFileCommand = new RelayCommand(o =>
            {
                var dialog = new Microsoft.Win32.OpenFileDialog()
                {
                    Title = "Choose file",
                    Filter = "Supported Images|*.svg;*.jpg;*.jpeg;*.gif;*.png;*.bmp;*.tif",
                    Multiselect = false
                };

                var result = dialog.ShowDialog();

                if (result != null && result.Value)
                {
                    _vm.File = dialog.FileName;
                }
            });

            _vm.SelectMaskCommand = new RelayCommand(o =>
            {
                var dialog = new Microsoft.Win32.OpenFileDialog()
                {
                    Title = "Choose mask",
                    Filter = "Supported Images|*.svg;*.jpg;*.jpeg;*.gif;*.png;*.bmp;*.tif",
                    Multiselect = false
                };

                var result = dialog.ShowDialog();

                if (result != null && result.Value)
                {
                    _vm.Mask = dialog.FileName;
                }
            });

            _vm.MaskRadioButtonCommand = new RelayCommand(o =>
            {
                var param = o.ToString();
                switch (param)
                {
                    case "None":
                        MaskBox.IsEnabled = false;
                        MaskButton.IsEnabled = false;
                        _vm.MaskType = AddLayerViewModel.MaskTypes.None;
                        if(LayerType.SelectedItem != null) _vm.UpdatePreview((Layer.LayerType)LayerType.SelectedItem);
                        break;
                    case "User":
                        MaskBox.IsEnabled = true;
                        MaskButton.IsEnabled = true;
                        _vm.MaskType = AddLayerViewModel.MaskTypes.User;
                        if (LayerType.SelectedItem != null) _vm.UpdatePreview((Layer.LayerType)LayerType.SelectedItem);
                        break;
                    case "Auto":
                        MaskBox.IsEnabled = false;
                        MaskButton.IsEnabled = false;
                        _vm.MaskType = AddLayerViewModel.MaskTypes.Autogenerated;
                        if (LayerType.SelectedItem != null) _vm.UpdatePreview((Layer.LayerType)LayerType.SelectedItem);
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            });
            
            DataContext = _vm;
            _vm.MaskRadioButtonCommand.Execute("None");

            // Need to add these handlers manually since the TextBox already has handlers for some kinds of drag-and-drop data types.
            // https://msdn.microsoft.com/en-us/library/hh144798(v=vs.110).aspx
            FileBox.AddHandler(TextBox.DropEvent, new DragEventHandler(LayerFileBox_OnDrop), true);
            MaskBox.AddHandler(TextBox.DropEvent, new DragEventHandler(LayerMaskBox_OnDrop), true);
        }

        private void CancelButton_OnClick(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void OkButton_OnClick(object sender, RoutedEventArgs e)
        {
            bool valid = !string.IsNullOrWhiteSpace(_vm.Name);
            if (string.IsNullOrWhiteSpace(_vm.File)) valid = false;

            if (valid)
            {
                if (RadioButton_Auto.IsChecked != null && RadioButton_Auto.IsChecked.Value)
                {
                    _vm.Mask = LayerHelper.SaveCustomMask(_vm.GeneratedMask);
                }

                var success = LayerHelper.CreateNewLayer(_vm.Name, _vm.File, _vm.Mask, (Layer.LayerType) LayerType.SelectedItem);
                if (success)
                {
                    OkClicked = true;
                    Close();
                    return;
                }

                MessageBox.Show(this, "Layer creation failed.");
            }
            else
            {
                MessageBox.Show(this, "Layer Name and Layer File are required.");
            }
        }

        private void LayerFileBox_OnDrop(object sender, DragEventArgs e)
        {
            var dropinfo = GetDroppedPath(e);
            
            if (dropinfo != null)
            {
                if (dropinfo.Item2 == ExternalImageType.WebContent)
                {
                    MessageBox.Show(this, "Only local images can be used for creating new layers");
                    _vm.FirePropertyChanged(nameof(_vm.File));
                    return;
                }

                var oldFile = _vm.File;
                _vm.File = dropinfo.Item1;
                var loaded = _vm.UpdatePreview((Layer.LayerType)LayerType.SelectedItem);
                if (!loaded)
                {
                    _vm.File = oldFile;
                    MessageBox.Show(this, "Failed to load image");
                }
            }
            else
            {
                MessageBox.Show(this, "Failed to parse drop");
            }
        }

        private void LayerMaskBox_OnDrop(object sender, DragEventArgs e)
        {
            var dropinfo = GetDroppedPath(e);

            if (dropinfo != null)
            {
                if (dropinfo.Item2 == ExternalImageType.WebContent)
                {
                    MessageBox.Show(this, "Only local images can be used for creating new layers");
                    _vm.FirePropertyChanged(nameof(_vm.Mask));
                    return;
                }

                var oldMask = _vm.Mask;
                _vm.Mask = dropinfo.Item1;
                var loaded = _vm.UpdatePreview((Layer.LayerType)LayerType.SelectedItem);
                if (!loaded)
                {
                    _vm.Mask = oldMask;
                    MessageBox.Show(this, "Failed to load image");
                }
            }
            else
            {
                MessageBox.Show(this, "Failed to parse drop");
            }
        }

        private void AllowDropping(object sender, DragEventArgs e)
        {
            e.Handled = true;
        }

        private Tuple<string, ExternalImageType> GetDroppedPath(DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                var file = ((string[])e.Data.GetData(DataFormats.FileDrop))[0];
                var uri = new Uri(file);

                return uri.IsFile
                    ? new Tuple<string, ExternalImageType>(file, ExternalImageType.LocalFile)
                    : new Tuple<string, ExternalImageType>(file, ExternalImageType.WebContent);
            }

            if (e.Data.GetDataPresent(DataFormats.Text) && e.Data.GetDataPresent(DataFormats.Html))
            {
                return new Tuple<string, ExternalImageType>(e.Data.GetData(DataFormats.Text).ToString(), ExternalImageType.WebContent);
            }

            if (e.Data.GetDataPresent(DataFormats.Html)) //TODO: Needs to be implemented if I ever add file-drops from a browser for adding layers.
            {
                return new Tuple<string, ExternalImageType>(null, ExternalImageType.WebContent);
            }

            return null;
        }

        private void LayerType_OnSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // Overlays cant have autogenerated masks, so disable the radiobutton.
            if ((Layer.LayerType) LayerType.SelectedItem == Layer.LayerType.Overlay)
            {
                RadioButton_Auto.IsEnabled = false;
                if (RadioButton_Auto.IsChecked != null && RadioButton_Auto.IsChecked.Value)
                {
                    RadioButton_None.IsChecked = true;
                    _vm.MaskRadioButtonCommand.Execute("None");
                }
            }
            else
            {
                RadioButton_Auto.IsEnabled = true;
            }

            _vm.UpdatePreview((Layer.LayerType) LayerType.SelectedItem);
        }

        private void PreviewButton_OnClick(object sender, RoutedEventArgs e)
        {
            if (_vm.PreviewVisibility == Visibility.Visible)
            {
                _vm.PreviewVisibility = Visibility.Collapsed;
                Height -= _vm.PreviewSize;
                if (Height < 220) Height = 220; //Minimum size of initial window where all controls are visible. 
            }
            else
            {
                _vm.PreviewVisibility = Visibility.Visible;
                Height += _vm.PreviewSize;
            }
        }
    }
}
